// <auto-generated />
using System;
using CodeFirstApproachForDB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeFirstApproachForDB.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LMS.Course", b =>
                {
                    b.Property<Guid>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CatagoryID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Duration")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("LevelID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Validity")
                        .HasColumnType("int");

                    b.HasKey("CourseID");

                    b.HasIndex("CatagoryID");

                    b.HasIndex("LevelID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("LMS.CourseCatagory", b =>
                {
                    b.Property<Guid>("CatagoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("CatagoryID");

                    b.ToTable("CourseCategory");
                });

            modelBuilder.Entity("LMS.CourseLevel", b =>
                {
                    b.Property<Guid>("LevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("LevelID");

                    b.ToTable("CourseLevels");
                });

            modelBuilder.Entity("LMS.Enrollment", b =>
                {
                    b.Property<Guid>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EnrollStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("CourseID");

                    b.HasIndex("UserID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("LMS.FeedbackQuestion", b =>
                {
                    b.Property<int>("FeedbackQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("FeedbackQuestionId");

                    b.ToTable("FeedbackQuestions");
                });

            modelBuilder.Entity("LMS.FeedbackQuestionOption", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FeedbackQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("OptionId");

                    b.HasIndex("FeedbackQuestionId");

                    b.ToTable("FeedbackQuestionOption");
                });

            modelBuilder.Entity("LMS.FeedbackResponse", b =>
                {
                    b.Property<int>("FeedbackResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FeedbackQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SelectedOptionOptionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackResponseId");

                    b.HasIndex("FeedbackQuestionId");

                    b.HasIndex("SelectedOptionOptionId");

                    b.ToTable("FeedbackResponses");
                });

            modelBuilder.Entity("LMS.Material", b =>
                {
                    b.Property<Guid>("MaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<decimal>("Duration")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Filepath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("TopicID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("MaterialID");

                    b.HasIndex("CourseID");

                    b.HasIndex("TopicID");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("LMS.PasswordHistory", b =>
                {
                    b.Property<Guid>("PasswordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NewPassword")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("OldPassword")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("PasswordID");

                    b.HasIndex("UserID");

                    b.ToTable("PasswordHistories");
                });

            modelBuilder.Entity("LMS.Profile", b =>
                {
                    b.Property<Guid>("ProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Stream")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("ProfileID");

                    b.HasIndex("UserID");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("LMS.QuestionOption", b =>
                {
                    b.Property<Guid>("QuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("QuizQuestionId")
                        .HasColumnType("char(36)");

                    b.HasKey("QuestionOptionId");

                    b.HasIndex("QuizQuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("LMS.Quiz", b =>
                {
                    b.Property<Guid>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("NameOfQuiz")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PassMark")
                        .HasColumnType("int");

                    b.HasKey("QuizId");

                    b.HasIndex("CourseID");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("LMS.QuizQuestion", b =>
                {
                    b.Property<Guid>("QuizQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuestionNo")
                        .HasColumnType("int");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("char(36)");

                    b.HasKey("QuizQuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("LMS.Topic", b =>
                {
                    b.Property<Guid>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TopicID");

                    b.HasIndex("CourseID");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("LMS.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AccountStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("UnblockRequest")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UserLastLogin")
                        .HasColumnType("datetime");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LMS.UserAnswer", b =>
                {
                    b.Property<Guid>("UserAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("QuestionOptionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("QuizQuestionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserAttemptId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserAnswerId");

                    b.HasIndex("QuestionOptionId");

                    b.HasIndex("QuizQuestionId");

                    b.HasIndex("UserAttemptId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("LMS.UserAttempt", b =>
                {
                    b.Property<Guid>("UserAttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("char(36)");

                    b.Property<float>("Score")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("UserAttemptId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserID");

                    b.ToTable("UserAttempts");
                });

            modelBuilder.Entity("LMS.UserProgress", b =>
                {
                    b.Property<Guid>("UserProgressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsWatched")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MaterialID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TopicID")
                        .HasColumnType("char(36)");

                    b.Property<TimeOnly>("TotalTime")
                        .HasColumnType("time(0)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.Property<TimeOnly>("WatchTime")
                        .HasColumnType("time(0)");

                    b.HasKey("UserProgressID");

                    b.HasIndex("CourseID");

                    b.HasIndex("MaterialID");

                    b.HasIndex("TopicID");

                    b.HasIndex("UserID");

                    b.ToTable("UserProgress");
                });

            modelBuilder.Entity("LMS.Course", b =>
                {
                    b.HasOne("LMS.CourseCatagory", "Catagory")
                        .WithMany("Course")
                        .HasForeignKey("CatagoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.CourseLevel", "Level")
                        .WithMany("Courses")
                        .HasForeignKey("LevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catagory");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("LMS.Enrollment", b =>
                {
                    b.HasOne("LMS.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.FeedbackQuestionOption", b =>
                {
                    b.HasOne("LMS.FeedbackQuestion", "FeedbackQuestion")
                        .WithMany("Options")
                        .HasForeignKey("FeedbackQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedbackQuestion");
                });

            modelBuilder.Entity("LMS.FeedbackResponse", b =>
                {
                    b.HasOne("LMS.FeedbackQuestion", "FeedbackQuestion")
                        .WithMany("Responses")
                        .HasForeignKey("FeedbackQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.FeedbackQuestionOption", "SelectedOption")
                        .WithMany("Responses")
                        .HasForeignKey("SelectedOptionOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedbackQuestion");

                    b.Navigation("SelectedOption");
                });

            modelBuilder.Entity("LMS.Material", b =>
                {
                    b.HasOne("LMS.Course", "Course")
                        .WithMany("Materials")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Topic", "Topic")
                        .WithMany("Materials")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("LMS.PasswordHistory", b =>
                {
                    b.HasOne("LMS.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Profile", b =>
                {
                    b.HasOne("LMS.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.QuestionOption", b =>
                {
                    b.HasOne("LMS.QuizQuestion", "QuizQuestion")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizQuestion");
                });

            modelBuilder.Entity("LMS.Quiz", b =>
                {
                    b.HasOne("LMS.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LMS.QuizQuestion", b =>
                {
                    b.HasOne("LMS.Quiz", "Quiz")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("LMS.Topic", b =>
                {
                    b.HasOne("LMS.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LMS.UserAnswer", b =>
                {
                    b.HasOne("LMS.QuestionOption", "QuestionOption")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.QuizQuestion", "QuizQuestion")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.UserAttempt", "UserAttempt")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserAttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionOption");

                    b.Navigation("QuizQuestion");

                    b.Navigation("UserAttempt");
                });

            modelBuilder.Entity("LMS.UserAttempt", b =>
                {
                    b.HasOne("LMS.Quiz", "Quiz")
                        .WithMany("UserAttempts")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.UserProgress", b =>
                {
                    b.HasOne("LMS.Course", "Course")
                        .WithMany("Userprogress")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Material", "Material")
                        .WithMany("users")
                        .HasForeignKey("MaterialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.Topic", "Topic")
                        .WithMany("UsersProgress")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Material");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.Course", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("Topics");

                    b.Navigation("Userprogress");
                });

            modelBuilder.Entity("LMS.CourseCatagory", b =>
                {
                    b.Navigation("Course");
                });

            modelBuilder.Entity("LMS.CourseLevel", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("LMS.FeedbackQuestion", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("LMS.FeedbackQuestionOption", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("LMS.Material", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("LMS.QuestionOption", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("LMS.Quiz", b =>
                {
                    b.Navigation("QuizQuestions");

                    b.Navigation("UserAttempts");
                });

            modelBuilder.Entity("LMS.QuizQuestion", b =>
                {
                    b.Navigation("QuestionOptions");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("LMS.Topic", b =>
                {
                    b.Navigation("Materials");

                    b.Navigation("UsersProgress");
                });

            modelBuilder.Entity("LMS.UserAttempt", b =>
                {
                    b.Navigation("UserAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
